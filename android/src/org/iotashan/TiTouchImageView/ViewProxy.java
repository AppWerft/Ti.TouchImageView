/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package org.iotashan.TiTouchImageView;

import java.io.IOException;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiBlob;
import org.appcelerator.titanium.TiC;
import org.appcelerator.titanium.util.Log;
import org.appcelerator.titanium.util.TiConfig;
import org.appcelerator.titanium.util.TiConvert;
import org.appcelerator.titanium.util.TiUIHelper;
import org.appcelerator.titanium.io.TiBaseFile;
import org.appcelerator.titanium.io.TiFileFactory;
import org.appcelerator.titanium.proxy.TiViewProxy;
import org.appcelerator.titanium.view.TiCompositeLayout;
import org.appcelerator.titanium.view.TiCompositeLayout.LayoutArrangement;
import org.appcelerator.titanium.view.TiDrawableReference;
import org.appcelerator.titanium.view.TiUIView;

import com.ortiz.touch.TouchImageView;

import android.app.Activity;
import android.graphics.Bitmap;
import android.os.Message;


@Kroll.proxy(creatableInModule=TiTouchImageViewModule.class, propertyAccessors = { "zoom", "image" })
public class ViewProxy extends TiViewProxy
{
	// Standard Debugging variables
	private static final String LCAT = "TiTouchImageView";
	private static final boolean DBG = TiConfig.LOGD;
	
	private static final int MSG_FIRST_ID = TiViewProxy.MSG_LAST_ID + 1;
	public static final int MSG_RESET_ZOOM = MSG_FIRST_ID + 101;
	
	private class TiTouchImageView extends TiUIView
	{
		TouchImageView tiv;
		
		public TiTouchImageView(final TiViewProxy proxy) {
			super(proxy);
			
			tiv = new TouchImageView(proxy.getActivity());
			
			getLayoutParams().autoFillsHeight = true;
			getLayoutParams().autoFillsWidth = true;
			
			setNativeView(tiv);
		}
		
		@Override
		public void processProperties(KrollDict props)
		{
			super.processProperties(props);
			
			if (props.containsKey("zoom")) {
				tiv.setZoom(TiConvert.toFloat(proxy.getProperty("zoom")));
			}
			if (props.containsKey("image")) {
				tiv.setImageBitmap(loadImageFromApplication((String)proxy.getProperty("image")));
			}
		}
		
		@Override
		public void propertyChanged(String key, Object oldValue, Object newValue, KrollProxy proxy)
		{
			if (key.equals("zoom")) {
				tiv.setZoom(TiConvert.toFloat(newValue));
			}
			if (key.equals("image")) {
				tiv.setImageBitmap(loadImageFromApplication((String)newValue));
			}
		}

		public void resetZoom()
		{
			tiv.resetZoom();
		}
		
		public Bitmap loadImageFromApplication(String imageName) {
			Bitmap result = null;
			try {
				// Load the image from the application assets
				String url = getPathToApplicationAsset(imageName);
				TiBaseFile file = TiFileFactory.createTitaniumFile(new String[] { url }, false);
				result = TiUIHelper.createBitmap(file.getInputStream());
				Log.i(LCAT, " bitmap loaded");
			} catch (IOException e) {
				Log.e(LCAT, " EXCEPTION - IO");
			}
			return result;
		}

		private String getPathToApplicationAsset(String assetName) {
			// The url for an application asset can be created by resolving the specified
			// path with the proxy context. This locates a resource relative to the
			// application resources folder
			String result = resolveUrl(null, assetName);
			
			return result;
		}
	}


	// Constructor
	public ViewProxy()
	{
		super();
	}

	@Override
	public TiUIView createView(Activity activity)
	{
		return new TiTouchImageView(this);
	}

	protected TiTouchImageView getView()
	{
		return (TiTouchImageView) getOrCreateView();
	}
	
	public boolean handleMessage(Message msg)
	{
		boolean handled = false;
		
		switch(msg.what) {
			case MSG_RESET_ZOOM:
				getView().resetZoom();
				handled = true;
				break;
			default:
				handled = super.handleMessage(msg);
		}
		
		return handled;
	}
	
	// Methods
	@Kroll.method
	public void resetZoom()
	{
		getMainHandler().removeMessages(MSG_RESET_ZOOM);
		getMainHandler().sendEmptyMessage(MSG_RESET_ZOOM);
	}
/*
	// Handle creation options
	@Override
	public void handleCreationDict(KrollDict options)
	{
		super.handleCreationDict(options);
	}

	// Methods
	@Kroll.getProperty @Kroll.method
	public String getImage()
	{
		return this.;
	}

	@Kroll.setProperty @Kroll.method
	public void setImage(String val)
	{
		image = val;
//		tiv.setImageBitmap();
	}

	@Kroll.getProperty @Kroll.method
	public float getZoom()
	{
		return tiv.getCurrentZoom();
	}

	@Kroll.setProperty @Kroll.method
	public void setZoom(float zoom)
	{
		tiv.setZoom(zoom);
	}
*/
}